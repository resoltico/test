{
  "rules": [
    {
      "name": "heading",
      "filter": ["h1", "h2", "h3", "h4", "h5", "h6"],
      "replacement": "function(content, node) { const level = parseInt(node.tagName.charAt(1)); return '\\n\\n' + '#'.repeat(level) + ' ' + content + '\\n'; }"
    },
    {
      "name": "paragraph",
      "filter": "p",
      "replacement": "function(content) { return '\\n\\n' + content + '\\n\\n'; }"
    },
    {
      "name": "emphasis",
      "filter": ["em", "i"],
      "replacement": "function(content) { return '*' + content + '*'; }"
    },
    {
      "name": "strong",
      "filter": ["strong", "b"],
      "replacement": "function(content) { return '**' + content + '**'; }"
    },
    {
      "name": "code",
      "filter": "code",
      "replacement": "function(content) { return '`' + content + '`'; }"
    },
    {
      "name": "strikethrough",
      "filter": ["del", "s", "strike"],
      "replacement": "function(content) { return '~~' + content + '~~'; }"
    },
    {
      "name": "link",
      "filter": "function(node) { return node.nodeName === 'A' && node.getAttribute('href'); }",
      "replacement": "function(content, node) { const href = node.getAttribute('href') || ''; return '[' + content + '](' + href + ')'; }"
    },
    {
      "name": "image",
      "filter": "img",
      "replacement": "function(content, node) { const alt = node.getAttribute('alt') || ''; const src = node.getAttribute('src') || ''; return '![' + alt + '](' + src + ')'; }"
    },
    {
      "name": "blockquote",
      "filter": "blockquote",
      "replacement": "function(content) { return '\\n\\n> ' + content.trim().replace(/\\n/g, '\\n> ') + '\\n\\n'; }"
    },
    {
      "name": "list",
      "filter": ["ul", "ol"],
      "replacement": "function(content, node) { return '\\n' + content + '\\n'; }"
    },
    {
      "name": "listItem",
      "filter": "li",
      "replacement": "function(content, node) { const parent = node.parentNode; const index = Array.prototype.indexOf.call(parent.children, node) + 1; return (parent.nodeName === 'OL' ? index + '. ' : '- ') + content + '\\n'; }"
    },
    {
      "name": "codeBlock",
      "filter": "pre",
      "replacement": "function(content, node) { const code = node.querySelector('code'); const language = code ? code.getAttribute('class') || '' : ''; const languageMatch = language.match(/language-(\\w+)/); const lang = languageMatch ? languageMatch[1] : ''; return '\\n```' + lang + '\\n' + (code ? code.textContent.replace(/⏎/g, '\\n') : content) + '\\n```\\n'; }"
    },
    {
      "name": "table",
      "filter": "table",
      "replacement": "function(content, node) { const headerRow = node.querySelector('thead tr'); const rows = Array.from(node.querySelectorAll('tbody tr')); let markdown = '\\n\\n'; if (headerRow) { const headerCells = Array.from(headerRow.querySelectorAll('th')); const headers = headerCells.map(cell => cell.textContent.trim()); const separator = headers.map(() => '---'); markdown += '| ' + headers.join(' | ') + ' |\\n| ' + separator.join(' | ') + ' |\\n'; } rows.forEach(row => { const cells = Array.from(row.querySelectorAll('td')); markdown += '| ' + cells.map(cell => cell.textContent.trim()).join(' | ') + ' |\\n'; }); const caption = node.querySelector('caption'); if (caption) { markdown += '\\n*' + caption.textContent.trim() + '*\\n'; } const tfoot = node.querySelector('tfoot'); if (tfoot) { markdown += '\\n*' + tfoot.textContent.trim() + '*\\n'; } return markdown; }"
    },
    {
      "name": "horizontalRule",
      "filter": "hr",
      "replacement": "function() { return '\\n\\n---\\n\\n'; }"
    },
    {
      "name": "mark",
      "filter": "mark",
      "replacement": "function(content) { return '**' + content + '**'; }"
    },
    {
      "name": "ruby",
      "filter": "ruby",
      "replacement": "function(content, node) { const rt = node.querySelector('rt'); if (rt) { const baseText = content.replace(rt.textContent || '', '').trim(); return baseText + ' (' + rt.textContent + ')'; } return content; }"
    },
    {
      "name": "abbr",
      "filter": "abbr",
      "replacement": "function(content, node) { const title = node.getAttribute('title'); return title ? content + ' (' + title + ')' : content; }"
    },
    {
      "name": "definition",
      "filter": "dfn",
      "replacement": "function(content) { return '*' + content + '*'; }"
    },
    {
      "name": "subscript",
      "filter": "sub",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "superscript",
      "filter": "sup",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "underline",
      "filter": "u",
      "replacement": "function(content) { return '*' + content + '*'; }"
    },
    {
      "name": "data",
      "filter": "data",
      "replacement": "function(content, node) { const value = node.getAttribute('value'); return value ? content : content; }"
    },
    {
      "name": "keyboard",
      "filter": "kbd",
      "replacement": "function(content) { return '`' + content + '`'; }"
    },
    {
      "name": "sample",
      "filter": "samp",
      "replacement": "function(content) { return '`' + content + '`'; }"
    },
    {
      "name": "variable",
      "filter": "var",
      "replacement": "function(content) { return '*' + content + '*'; }"
    },
    {
      "name": "bdi",
      "filter": "bdi",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "bdo",
      "filter": "bdo",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "wbr",
      "filter": "wbr",
      "replacement": "function() { return ''; }"
    },
    {
      "name": "cite",
      "filter": "cite",
      "replacement": "function(content) { return '*' + content + '*'; }"
    },
    {
      "name": "form",
      "filter": "form",
      "replacement": "function(content) { return '\\nFORM START\\n' + content + 'FORM END\\n'; }"
    },
    {
      "name": "fieldset",
      "filter": "fieldset",
      "replacement": "function(content, node) { const legend = node.querySelector('legend'); return (legend ? legend.textContent + '\\n' : '') + content; }"
    },
    {
      "name": "input",
      "filter": "input",
      "replacement": "function(content, node) { const type = node.getAttribute('type') || 'text'; const id = node.getAttribute('id') || ''; return '  '; }"
    },
    {
      "name": "select",
      "filter": "select",
      "replacement": "function(content, node) { const options = Array.from(node.querySelectorAll('option')).map(option => option.textContent).join(', '); return options ? options + '  ' : '  '; }"
    },
    {
      "name": "optgroup",
      "filter": "optgroup",
      "replacement": "function(content, node) { const label = node.getAttribute('label'); return label ? label + ': ' + content : content; }"
    },
    {
      "name": "option",
      "filter": "option",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "textarea",
      "filter": "textarea",
      "replacement": "function() { return '  '; }"
    },
    {
      "name": "button",
      "filter": "button",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "output",
      "filter": "output",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "progress",
      "filter": "progress",
      "replacement": "function() { return '  '; }"
    },
    {
      "name": "meter",
      "filter": "meter",
      "replacement": "function() { return '  '; }"
    },
    {
      "name": "label",
      "filter": "label",
      "replacement": "function(content) { return content + '  '; }"
    },
    {
      "name": "footer",
      "filter": "footer",
      "replacement": "function(content) { return '\\n' + content; }"
    },
    {
      "name": "header",
      "filter": "header",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "nav",
      "filter": "nav",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "menu",
      "filter": "menu",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "figure",
      "filter": "figure",
      "replacement": "function(content) { return '\\n' + content; }"
    },
    {
      "name": "figcaption",
      "filter": "figcaption",
      "replacement": "function(content) { return '*' + content + '*'; }"
    },
    {
      "name": "svg",
      "filter": "function(node) { return node.nodeName === 'SVG' && node.hasAttribute('data-markdown-chart'); }",
      "replacement": "function() { return '\\n### The Framework Lifecycle Visualized\\n\\n*A chart showing declining interest over framework lifecycle:  \\nHype (tallest bar) → Adopt → Stack → Stable → Dead (shortest bar)*\\n'; }"
    },
    {
      "name": "dl",
      "filter": "dl",
      "replacement": "function(content) { return '\\n' + content; }"
    },
    {
      "name": "dt",
      "filter": "dt",
      "replacement": "function(content) { return '\\n**' + content + '**  '; }"
    },
    {
      "name": "dd",
      "filter": "dd",
      "replacement": "function(content) { return content + '\\n'; }"
    },
    {
      "name": "small",
      "filter": "small",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "span",
      "filter": "span",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "div",
      "filter": "div",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "section",
      "filter": "section",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "article",
      "filter": "article",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "aside",
      "filter": "aside",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "address",
      "filter": "address",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "search",
      "filter": "search",
      "replacement": "function(content) { return content; }"
    },
    {
      "name": "math",
      "filter": "math",
      "replacement": "function(content, node) { return content; }"
    },
    {
      "name": "mathml-formula",
      "filter": "function(node) { return node.nodeName === 'SPAN' && node.classList.contains('markdown-math'); }",
      "replacement": "function(content) { return content; }"
    }
  ],
  "keep": [],
  "remove": []
}
